/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Component.Chip;
import LevelDesigner.Board;
import LevelDesigner.Level1;
import Component.Component;
import java.awt.*;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 * GUI permainan chip challenge
 * @author Adrian Reynaldi(2013730058)
 * @author Enricofindley  (2013730008)
 * @author Yohanes Ediwan (2013730044)
 */
public class ChipGUI extends javax.swing.JFrame {

    private Board b;
    JFrame conditionFrame;
    private Chip player;
    public boolean[] emerge;
    public boolean finished = true;
    /**
     * Creates new form ChipGUI
     */
    public ChipGUI() {
        initComponents();
        JOptionPane pane = new JOptionPane();
        pane.showInputDialog(rootPane, "Enter Your Name", "Start Game", 0);
        this.setTitle("Chip Challenge");
        this.repaint();
        this.setBoard();
        this.player=new Chip(4, 4, b, this);
        addKeyListener(player);
        this.setFocusable(true);
        setFocusTraversalKeysEnabled(false);
        this.setVisible(false);
        this.add(b);
        this.setSize(720, 600);
    }
    
    public void setBoard() {
        b = (new Level1(9, 9));
        b.setBarrier(true);
        b.setFinish();
        b.setHint();
        b.setWaterBoots(true, true);
        b.setFireBoots(true, true);
        b.setFire();
        b.setWater();
        boolean[] emerge = {true, true, true, true, true};
        b.setIC(emerge);
        b.setWall();
    }

  /**
   * Override method paint milik JFrame
   * @param g graphic program
   */
    @Override
    public void paint(Graphics g) {
        b.paint(g);
    }

    /**
     * Method untuk memunculkan bantuan untuk menyelesaikan permainan
     * @param show penanda apakah hint harus muncul atau tidak
     */
    public void showHint(boolean show)
    {
        if(show == true)
        {
            JOptionPane.showMessageDialog(rootPane, "1.Take the fire boots to go through the flames \n2.Take the water boots to go through the water \n3.Collect all the IC to break the barrier ", "Hint", 0);
        }
        else
        {
            
        }

    }
    
    /**
     * Setter method untuk papan permainan pada GUI
     */
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 749, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 465, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Method untuk membuat popup window jika game selesai
     * @param isWin penanda apakah player menang atau kalah
     */
    public void createConditionFrame(boolean isWin) {
        if(isWin == true)
        {
            if (JOptionPane.showOptionDialog(rootPane, "Congratulation !! You Win!! \n Do You Want To Play Again ?", "Game Over", 0, 2, null, null, null) == 1) {
                this.dispose();
            } 
            else {
                this.dispose();
                new ChipGUI().setVisible(true);
            }
        }
        else
        {
            if (JOptionPane.showOptionDialog(rootPane, "Try Again?", "Game Over", 0, 2, null, null, null) == 1) {
                this.dispose();
            } 
            else {
                this.dispose();
                new ChipGUI().setVisible(true);
            }
        }
        
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChipGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChipGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChipGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChipGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChipGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
   

}
